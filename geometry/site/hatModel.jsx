/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import React, { forwardRef, useRef, useContext } from 'react'
import { extend } from "@react-three/fiber"
import { useGLTF, useTexture } from '@react-three/drei'
import { UIContext } from "../../src/App"
import HueMaterial from "./hueMaterial"

extend({ HueMaterial })

const HatModel = forwardRef( (props, ref) => {
  const { currentShape, modelColor } = useContext(UIContext);
  const hatRef = useRef();
  const { nodes, materials } = useGLTF('../geometry/site/hat.gltf');
  const tmap = useTexture('../images/lightbakes/hat.png');
  const matColor = new THREE.Color(modelColor.find(d => d.name == "hat").color);
  let visibility = currentShape.hat.models[currentShape.hat.curr] == "hat";

  return (
    <group {...props} dispose={null}>
      <mesh
        ref={ref}
        visible={visibility}
        castShadow
        receiveShadow
        geometry={nodes.hat.geometry}
        // material={nodes.head.material}
        userData={{modelType: "hat"}}
      >
        <hueMaterial 
          tMap={ tmap }
          uColor={ matColor } 
          uColor2={ new THREE.Color("green") }
          uColor3={ new THREE.Color("red") }
          uBrightnss={ 0.1 }
          attach="material" />
      </mesh>
    </group>
  )
})

useGLTF.preload('../geometry/site/hat.gltf')

export default HatModel;